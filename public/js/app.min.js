const helper={shorten:(a,b)=>{let c=a+'',d=b||50;return c.length>d?c.substring(0,d-1)+'...':c},wssURL:()=>{return`${location.protocol.replace('http','ws')}//${location.hostname}:${location.port}`}};const $=a=>{return document.getElementById(a)},presenter={toast:(a,b)=>{let c=$('snackbar');c.className='show',c.innerHTML=a,presenter.toastIndex=(presenter.toastIndex||0)+1,setTimeout(()=>{0==--presenter.toastIndex&&(c.className=c.className.replace('show',''))},b||2e3)},drawWorld:a=>{const b=$('board'),c=b.getContext('2d'),d=8,f=Math.floor(b.width/d),g=a.width*a.height;for(let h=0;h<g;h+=1){const j=h%f,k=(h-j)/f;c.fillStyle=null===a.colors[h]?'black':a.colors[h],c.fillRect(j*d+1,k*d+1,d-1,d-1)}},bindEvents:function(){const a=$('board'),b=a.getContext('2d');a.addEventListener('click',function(c){const d=8,f=a.getBoundingClientRect(),g=Math.floor((c.clientX-f.left)/d),h=Math.floor((c.clientY-f.top)/d),j=Math.floor(a.width/d);b.fillStyle=app.color,b.fillRect(g*d+1,h*d+1,d-1,d-1),app.requestSeed(g+h*j,app.color)}),$('btn-color').onclick=app.requestNewColor,$('btn-preset-1').onclick=()=>{presenter.toast('Still Life Preset Injection',1e3),[2515,2516,2615,2616].forEach(c=>app.requestSeed(c,app.color))},$('btn-preset-2').onclick=()=>{presenter.toast('Oscillator Preset Injection',1e3),[3256,3257,3258].forEach(c=>app.requestSeed(c,app.color))},$('btn-preset-3').onclick=()=>{presenter.toast('SpaceShip Preset Injection',1e3),[356,457,458,557,556].forEach(c=>app.requestSeed(c,app.color))}},notifyCellColor:a=>{$('btn-color').style.color=a,presenter.toast(`<span style="color:${a}"><b>Cell Color</b></span>`)},notifySeedStatus:a=>{presenter.toast(a,1e3)}};const wsc={onOpen:void 0,onError:void 0,onColorReply:void 0,onWorldReply:void 0,onSeedReply:void 0,startup:()=>{wsc.client=new WebSocket(helper.wssURL()),wsc.client.onopen=function(){console.log('ws connection opened'),wsc.onOpen&&wsc.onOpen()},wsc.client.onerror=a=>{console.log('ws connection error: %s',a),wsc.onError&&wsc.onError(a)},wsc.client.onmessage=a=>{if(a&&a.data){let b=a.data+'';console.log('got raw message: %s',helper.shorten(b)),wsc.onColorReply&&b.startsWith('#')?wsc.onColorReply(b):wsc.onWorldReply&&b.startsWith('{')?wsc.onWorldReply(JSON.parse(b)):wsc.onSeedReply&&b.startsWith('seed')&&wsc.onSeedReply(b)}}},sendCommand:function(a){wsc.client&&1===wsc.client.readyState?(console.log('sending command: %s',a),wsc.client.send(a)):(console.log('client not connected'),presenter.toast('Connection Error, <a href=".">Please Reload</a>',1e4))},requestNewColor:function(){console.log('requesting new color'),wsc.sendCommand('nextColor')},requestWorld:function(){console.log('requesting world cells data'),wsc.sendCommand('world')},requestSeed:function(a,b){console.log('requesting world'),wsc.sendCommand(`seed ${a} ${b}`)}};const app={REFRESH_RATE_MS:500,requestNewColor:wsc.requestNewColor,requestSeed:wsc.requestSeed,requestWorld:wsc.requestWorld,run:()=>{wsc.onOpen=()=>{presenter.bindEvents(),setInterval(wsc.requestWorld,app.REFRESH_RATE_MS)},wsc.onError=()=>{presenter.toast('Connection Error, <a href=".">Please Reload</a>',1e4)},wsc.onColorReply=a=>{console.log('using cell color %s',a),app.color=a,presenter.notifyCellColor(a)},wsc.onWorldReply=a=>{console.log('got world cells data'),presenter.drawWorld(a)},wsc.onSeedReply=a=>{console.log('got cell seed status'),presenter.notifySeedStatus(a.substring(4))},wsc.startup()}};onload=()=>{console.log('page ready, loading the app...'),app.run()};